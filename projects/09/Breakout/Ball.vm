function Ball.new 0
push constant 4
call Memory.alloc 1
pop pointer 0
push constant 4
pop static 0
push constant 1
pop this 2
push constant 2
pop this 3
push pointer 0
call Ball.resetPosition 1
pop temp 0
push pointer 0
call Ball.draw 1
pop temp 0
push pointer 0
return
function Ball.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Ball.draw 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push static 0
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Ball.erase 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push static 0
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Ball.getX 0
push argument 0
pop pointer 0
push this 0
return
function Ball.setVX 0
push argument 0
pop pointer 0
push argument 1
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 2
push constant 1
add
pop this 2
label IF_FALSE0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 2
push constant 1
sub
pop this 2
label IF_FALSE1
push this 2
push constant 2
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 2
pop this 2
label IF_FALSE2
push this 2
push constant 2
neg
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 2
neg
pop this 2
label IF_FALSE3
push constant 0
return
function Ball.hitBottom 0
push argument 0
pop pointer 0
push this 1
push static 0
add
push constant 255
eq
return
function Ball.resetPosition 0
push argument 0
pop pointer 0
push constant 140
pop this 1
push constant 1
neg
pop this 3
push this 0
push constant 100
add
pop this 0
label WHILE_EXP0
push this 0
push constant 255
gt
not
if-goto WHILE_END0
push this 0
push constant 255
sub
pop this 0
goto WHILE_EXP0
label WHILE_END0
push constant 128
push this 0
add
pop this 0
push this 0
push constant 255
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop this 2
goto IF_END0
label IF_FALSE0
push constant 1
neg
pop this 2
label IF_END0
push this 0
push static 0
add
push constant 511
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 510
push static 0
sub
pop this 0
label IF_FALSE1
push this 0
push static 0
sub
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push static 0
push constant 1
add
pop this 0
label IF_FALSE2
push constant 0
return
function Ball.animationStep 0
push argument 0
pop pointer 0
push pointer 0
call Ball.erase 1
pop temp 0
push this 0
push this 2
add
pop this 0
push this 1
push this 3
add
pop this 1
push this 0
push static 0
add
push constant 510
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 511
push static 0
sub
pop this 0
push this 2
neg
pop this 2
label IF_FALSE0
push this 0
push static 0
sub
push constant 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push static 0
pop this 0
push this 2
neg
pop this 2
label IF_FALSE1
push this 1
push static 0
sub
push constant 1
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push static 0
pop this 1
push this 3
neg
pop this 3
label IF_FALSE2
push this 1
push static 0
add
push constant 254
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 255
push static 0
sub
pop this 1
push this 3
neg
pop this 3
label IF_FALSE3
push pointer 0
call Ball.draw 1
pop temp 0
push constant 0
return
function Ball.collide 7
push argument 0
pop pointer 0
call Brick.getH 0
pop local 0
call Brick.getW 0
pop local 1
push argument 1
call Brick.getX 1
pop local 2
push argument 1
call Brick.getY 1
pop local 3
push argument 1
call Brick.isAlive 1
pop local 6
push this 0
push local 2
sub
call Math.abs 1
pop local 4
push this 1
push local 3
sub
call Math.abs 1
pop local 5
push local 4
push static 0
push local 1
add
lt
push local 5
push static 0
push local 0
add
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 6
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
call Brick.kill 1
pop temp 0
push local 4
push static 0
push local 1
add
push constant 2
sub
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 3
neg
pop this 3
goto IF_END2
label IF_FALSE2
push this 2
neg
pop this 2
label IF_END2
label IF_FALSE1
label IF_FALSE0
push constant 0
return
