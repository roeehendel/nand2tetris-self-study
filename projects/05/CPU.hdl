// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M=contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // "Decode" instruction
    And(a=instruction[0], b=instruction[0], out=j3);
    And(a=instruction[1], b=instruction[1], out=j2);
    And(a=instruction[2], b=instruction[2], out=j1);

    And(a=instruction[3], b=instruction[3], out=d3);
    And(a=instruction[4], b=instruction[4], out=d2);
    And(a=instruction[5], b=instruction[5], out=d1);

    And(a=instruction[6], b=instruction[6], out=c6);
    And(a=instruction[7], b=instruction[7], out=c5);
    And(a=instruction[8], b=instruction[8], out=c4);
    And(a=instruction[9], b=instruction[9], out=c3);
    And(a=instruction[10], b=instruction[10], out=c2);
    And(a=instruction[11], b=instruction[11], out=c1);

    And(a=instruction[12], b=instruction[12], out=a);

    And(a=instruction[15], b=instruction[15], out=isCInst);
    Not(in=instruction[15], out=isAInst);


    // Choose A-Register input
    Mux16(a[0..14]=instruction[0..14], b=outALU, sel=isCInst, out=inAReg);

    // Decide if should load A-Register
    And(a=isCInst, b=d1, out=loadARegCInst);
    Or(a=isAInst, b=loadARegCInst, out=loadAReg);

    // Decide if should load D-Register
    And(a=isCInst, b=d2, out=loadDReg);

    // The D-Register and A-Register
    DRegister(in=outALU, load=loadDReg, out=outDReg);
    ARegister(in=inAReg, load=loadAReg, out=outAReg);

    // Choose ALU y value (A-Register or M-Register)
    Mux16(a=outAReg, b=inM, sel=a, out=yALU);

    // The ALU
    ALU(x=outDReg, y=yALU, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outALU, zr=zr, ng=ng);

    // Decide if should jump (load Program Counter)
    Not(in=zr, out=zrNot);
    Not(in=ng, out=ngNot);
    And(a=zrNot, b=ngNot, out=ps);

    And(a=ng, b=j1, out=jump1);
    And(a=zr, b=j2, out=jump2);
    And(a=ps, b=j3, out=jump3);

    Or(a=jump1, b=jump2, out=jump12);
    Or(a=jump12, b=jump3, out=jump);

    And(a=isCInst, b=jump, out=loadPC);

    // The Program Counter
    PC(in=outAReg, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    // Route ALU output to memory
    And16(a=outALU, b=outALU, out=outM);

    // Decide if should write to memory
    And(a=isCInst, b=d3, out=writeM);

    // Route A-Register output to addressM
    And16(a=outAReg, b=outAReg, out[0..14]=addressM);
}