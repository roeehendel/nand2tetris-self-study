// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        let freeList = 2048;
        let freeList[0] = 0;
        let freeList[1] = 14335;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int currentBlock;
        var Array allocatedBlock;

        let currentBlock = freeList;

        while (currentBlock[1] < (size + 2)) {
            let currentBlock = currentBlock[0];
        }

        let currentBlock[1] = currentBlock[1] - (size + 2);

        let allocatedBlock = currentBlock + 2 + currentBlock[1]; // may need +1 or something
        let allocatedBlock[0] = 0;
        let allocatedBlock[1] = size;

        return allocatedBlock + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int currentBlock;
        let currentBlock = freeList;

        while (~(currentBlock[0] = 0)) {
            let currentBlock = currentBlock[0];
        }

        let currentBlock[0] = o - 2;
        return;
    }    
}
